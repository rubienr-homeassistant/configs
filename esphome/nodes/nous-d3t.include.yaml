esphome:
  name: ${name}
  friendly_name: ${friendly_name}

  on_boot:
    - priority: 600
      then:
        - output.turn_off: relay_on_coil
        - output.turn_off: relay_off_coil
        - output.set_level:
            id: led_link
            level: 0.0
        - script.execute: update_relay_led
        - lambda: |-
            ESP_LOGD("on_boot", "chip model = %s rev %d\n", ESP.getChipModel(), ESP.getChipRevision());

esp32:
  board: esp32dev

logger:
#  level: VERY_VERBOSE
#  level: DEBUG

api:
  encryption:
    key: !secret api_key

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap: {}

  on_connect:
    then:
      - output.set_level:
          id: led_link
          level: 0.025
  on_disconnect:
    then:
      - output.set_level:
          id: led_link
          level: 0.0

improv_serial:

captive_portal:

time:
  - platform: homeassistant
    id: homeassistant_time

# https://github.com/tasmota/docs/blob/master/docs/Components.md
# https://templates.blakadder.com/nous_D3T.html
# {
#     "NAME": "Nous D3T",
#     "GPIO": [
#         32,     GPIO0  Button1
#         1,      GPIO1  User (TX0)
#         9312,   GPIO2  Relay_b 1
#         1,      GPIO3  User (RX0)
#         1,      GPIO4  User
#         320,    GPIO5  Led_i1
#         1,      GPIO9  User
#         1,      GPIO10 User
#         9313,   GPIO12 Relay_b 2
#         8160,   GPIO13 BL0942 Rx (BL0942 Serial interface)
#         3200,   GPIO14 Serial Tx (Serial interface)
#         544,    GPIO15 LedLink
#         1,      GPIO16 User
#         1,      GPIO17 User
#         1,      GPIO18 User
#         1,      GPIO19 User
#         0,      GPIO20 None
#         1,      GPIO21 User
#         1,      GPIO22 User
#         1,      GPIO23 User
#         0,      GPIO24 None
#         0,      GPIO25 None
#         1,      GPIO26 User
#         1,      GPIO27 User
#         0,      GPIO6  None
#         0,      GPIO7  None
#         0,      GPIO8  None
#         0,      GPIO11 None
#         1,      GPIO32 User
#         1,      GPIO33 User
#         4736,   GPIO34 ADC Temp1 (Analog Thermistor)
#         1,      GPIO35 User
#         1,      GPIO36 User
#         0,      GPIO37 None
#         0,      GPIO38 None
#         1       GPIO39 User
#     ],
#     "FLAG": 0,
#     "BASE": 1
# }

# esp32_ble_tracker:

# bluetooth_proxy:

output:
  - platform: ledc
    pin: GPIO5
    id: led_relay
    inverted: true
    frequency: 1000 Hz

  - platform: ledc
    pin: GPIO15
    id: led_link
    inverted: true
    frequency: 1000 Hz

  - platform: gpio
    pin: GPIO12
    id: relay_on_coil
    inverted: false

  - platform: gpio
    pin: GPIO2
    id: relay_off_coil
    inverted: false

switch:

##  - platform: gpio
##    pin: GPIO1 # log hangs on init
##    name: User GPIO01
#
#  - platform: gpio
#    pin: GPIO3 # OK
#    name: User GPIO03
#
#  - platform: gpio
#    pin: GPIO4 # OK - bl0942 related?
#    name: User GPIO04
#
#  - platform: gpio
#    pin: GPIO9 # OK - bl0942 related?
#    name: User GPIO09
#
#  - platform: gpio
#    pin: GPIO10 # OK
#    name: User GPIO10
#
##  - platform: gpio
##    pin: GPIO16 # reset loop if enabled
##    name: User GPIO16
##
##  - platform: gpio
##    pin: GPIO17 # reset loop if enabled
##    name: User GPIO17
#
#  - platform: gpio
#    pin: GPIO18
#    name: User GPIO18
#
#  - platform: gpio
#    pin: GPIO19
#    name: User GPIO19
#
#  - platform: gpio
#    pin: GPIO21
#    name: User GPIO21
#
#  - platform: gpio
#    pin: GPIO22
#    name: User GPIO22
#
#  - platform: gpio
#    pin: GPIO23
#    name: User GPIO23
#
#  - platform: gpio
#    pin: GPIO26
#    name: User GPIO26
#
#  - platform: gpio
#    pin: GPIO27
#    name: User GPIO27
#
#  - platform: gpio
#    pin: GPIO32
#    name: User GPIO32
#
#  - platform: gpio
#    pin: GPIO33
#    name: User GPIO33
#
##  - platform: gpio
##    pin: GPIO35 # input pin
##    name: User GPIO35
##
##  - platform: gpio
##    pin: GPIO36 # input pin
##    name: User GPIO36
##
##  - platform: gpio
##    pin: GPIO39 # input pin
##    name: User GPIO39

  # exposes the manual/user relais switch to homeassistant (not for automation purpose)
  - platform: template
    name: "Relay"
    id: relay_control
    optimistic: true
    restore_mode: DISABLED # required, otherwise initialization will trigger turn_on_action or turn_off_action
    icon: mdi:power
    turn_on_action:
      - script.execute: toggle_relay
      - lambda: |-
          id(manually_turned_on_s)      = millis() / 1000;
          id(automatically_turned_on_s) = 0;
    turn_off_action:
      - script.execute: toggle_relay
      - lambda: |-
          id(manually_turned_on_s)      = 0;
          id(automatically_turned_on_s) = 0;
    lambda: |-
      return id(relay_toggle_state);

  # exposes the automation relais switch to homeassistant (for automation scripts)
  - platform: template
    name: "Automation Relay"
    id: relay_control_internal
    optimistic: true
    restore_mode: DISABLED # required, otherwise initialization will trigger turn_on_action or turn_off_action
    icon: mdi:power
    turn_on_action:
      - script.execute: toggle_relay
      - lambda: |-
          id(manually_turned_on_s)      = 0;
          id(automatically_turned_on_s) = millis() / 1000;
    turn_off_action:
      - script.execute: toggle_relay
      - lambda: |-
          id(manually_turned_on_s)      = 0;
          id(automatically_turned_on_s) = 0;
    lambda: |-
      return id(relay_toggle_state);

binary_sensor: # senses the momentary push-button; not exposed to homeassistant
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
    id: sensor_toggle
    name: "Pushbutton"
    on_press:
      - script.execute: toggle_relay
      - lambda: |-
          if (id(relay_toggle_state)) {
            id(manually_turned_on_s)      = id(relay_toggle_state) ? millis() / 1000 : 0;
            id(automatically_turned_on_s) = 0;
          } else {
            id(manually_turned_on_s)      = 0;
            id(automatically_turned_on_s) = 0;
          }

globals:
  # bi-stable relay state: off (false), on (true)
  - id: relay_toggle_state
    type: bool
    restore_value: true
    initial_value: 'false'

  - id: manually_turned_on_s
    type: unsigned int
    initial_value: '0'

  - id: automatically_turned_on_s
    type: unsigned int
    initial_value: '0'

script:
  - id: update_relay_led
    mode: single
    then:
      - lambda: |-
          if (id(relay_toggle_state))
            id(led_relay).set_level(0.2);
          else
            id(led_relay).set_level(0.0);
   # bi-stable relais abstraction
  - id: toggle_relay
    mode: single
    then:
      - lambda: |-
          if (id(relay_toggle_state)) {
            id(relay_on_coil).turn_off();
            id(relay_off_coil).turn_on();
            id(relay_toggle_state) = false;
          } else {
            id(relay_off_coil).turn_off();
            id(relay_on_coil).turn_on();
            id(relay_toggle_state) = true;
          }
      - script.execute: update_relay_led
      - delay: 300ms
      - output.turn_off: relay_on_coil
      - output.turn_off: relay_off_coil

uart:
  id: uart_bl0942
  rx_pin: GPIO13
  tx_pin: GPIO14
  baud_rate: 4800
  parity: NONE
  stop_bits: 1

sensor:
  - platform: internal_temperature
    name: "MCU Temperature"
    update_interval: 5s

  - platform: wifi_signal
    name: "Wifi Signal"
    update_interval: 60s
    icon: mdi:wifi

  - platform: uptime
    name: "Uptime"
    update_interval: 60s
    icon: mdi:clock-outline

  - platform: template
    id: manually_turned_on_since_s
    unit_of_measurement: "s"
    accuracy_decimals: 0
    icon: mdi:timer-outline
    name: "Manual On Duration"
    lambda: |-
      return (float)id(manually_turned_on_s) ? millis() / 1000 - id(manually_turned_on_s) : 0;
    update_interval: 5s

  - platform: template
    id: automatically_turned_on_since_s
    unit_of_measurement: "s"
    accuracy_decimals: 0
    icon: mdi:timer-outline
    name: "Auto On Duration"
    lambda: |-
      return (float)id(automatically_turned_on_s) ? millis() / 1000 - id(automatically_turned_on_s) : 0;
    update_interval: 5s

  - platform: bl0942
    uart_id: uart_bl0942
    reset: true
    voltage:
      name: "Voltage"
    current:
      name: "Current"
    power:
      name: "Power"
      filters:
        # some power meters will report this in negative values (probably wired backwards)
        - multiply: -1.0
    energy:
      name: "Energy"
    frequency:
      name: "Frequency"
    update_interval: 5s

  # The temperature readout is inaccurate (not calibrated - just a shot in the dark).
  - platform: adc
    id: temp_adc_voltage
    pin: GPIO34
    # attenuation: 11db
    attenuation: auto
  - platform: resistance
    id: temp_resistance
    sensor: temp_adc_voltage
    configuration: DOWNSTREAM
    resistor: 10kOhm
  - platform: ntc
    sensor: temp_resistance
    name: Temperature
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
